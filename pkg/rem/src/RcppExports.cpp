// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// inertiaCpp
NumericVector inertiaCpp(NumericVector time, NumericVector weightvar, std::vector<std::string> sender, std::vector<std::string> target, std::vector<std::string> typevar, std::string type1, std::string type2, std::vector<std::string> attrvar, std::string attr1, std::string attr2, double xlog, std::string inertiatype);
RcppExport SEXP rem_inertiaCpp(SEXP timeSEXP, SEXP weightvarSEXP, SEXP senderSEXP, SEXP targetSEXP, SEXP typevarSEXP, SEXP type1SEXP, SEXP type2SEXP, SEXP attrvarSEXP, SEXP attr1SEXP, SEXP attr2SEXP, SEXP xlogSEXP, SEXP inertiatypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type time(timeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weightvar(weightvarSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type sender(senderSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type typevar(typevarSEXP);
    Rcpp::traits::input_parameter< std::string >::type type1(type1SEXP);
    Rcpp::traits::input_parameter< std::string >::type type2(type2SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type attrvar(attrvarSEXP);
    Rcpp::traits::input_parameter< std::string >::type attr1(attr1SEXP);
    Rcpp::traits::input_parameter< std::string >::type attr2(attr2SEXP);
    Rcpp::traits::input_parameter< double >::type xlog(xlogSEXP);
    Rcpp::traits::input_parameter< std::string >::type inertiatype(inertiatypeSEXP);
    __result = Rcpp::wrap(inertiaCpp(time, weightvar, sender, target, typevar, type1, type2, attrvar, attr1, attr2, xlog, inertiatype));
    return __result;
END_RCPP
}
// degreeCpp
NumericVector degreeCpp(NumericVector time, NumericVector weightvar, std::vector<std::string> degreevar, std::vector<std::string> typevar, std::string type1, std::string type2, std::vector<std::string> attrvar, std::string attr1, std::string attr2, double xlog, std::string degreetype);
RcppExport SEXP rem_degreeCpp(SEXP timeSEXP, SEXP weightvarSEXP, SEXP degreevarSEXP, SEXP typevarSEXP, SEXP type1SEXP, SEXP type2SEXP, SEXP attrvarSEXP, SEXP attr1SEXP, SEXP attr2SEXP, SEXP xlogSEXP, SEXP degreetypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type time(timeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weightvar(weightvarSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type degreevar(degreevarSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type typevar(typevarSEXP);
    Rcpp::traits::input_parameter< std::string >::type type1(type1SEXP);
    Rcpp::traits::input_parameter< std::string >::type type2(type2SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type attrvar(attrvarSEXP);
    Rcpp::traits::input_parameter< std::string >::type attr1(attr1SEXP);
    Rcpp::traits::input_parameter< std::string >::type attr2(attr2SEXP);
    Rcpp::traits::input_parameter< double >::type xlog(xlogSEXP);
    Rcpp::traits::input_parameter< std::string >::type degreetype(degreetypeSEXP);
    __result = Rcpp::wrap(degreeCpp(time, weightvar, degreevar, typevar, type1, type2, attrvar, attr1, attr2, xlog, degreetype));
    return __result;
END_RCPP
}
// fourCycleCpp
NumericVector fourCycleCpp(std::vector<std::string> sender, std::vector<std::string> target, std::vector<std::string> typevar, NumericVector time, NumericVector weightvar, double xlog, std::vector<std::string> attrvarNow, std::string attrNow, std::vector<std::string> attrvarAaj, std::string attrAaj, std::vector<std::string> attrvarBib, std::string attrBib, std::vector<std::string> attrvarCij, std::string attrCij, std::string fourCycleType);
RcppExport SEXP rem_fourCycleCpp(SEXP senderSEXP, SEXP targetSEXP, SEXP typevarSEXP, SEXP timeSEXP, SEXP weightvarSEXP, SEXP xlogSEXP, SEXP attrvarNowSEXP, SEXP attrNowSEXP, SEXP attrvarAajSEXP, SEXP attrAajSEXP, SEXP attrvarBibSEXP, SEXP attrBibSEXP, SEXP attrvarCijSEXP, SEXP attrCijSEXP, SEXP fourCycleTypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type sender(senderSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type typevar(typevarSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type time(timeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weightvar(weightvarSEXP);
    Rcpp::traits::input_parameter< double >::type xlog(xlogSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type attrvarNow(attrvarNowSEXP);
    Rcpp::traits::input_parameter< std::string >::type attrNow(attrNowSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type attrvarAaj(attrvarAajSEXP);
    Rcpp::traits::input_parameter< std::string >::type attrAaj(attrAajSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type attrvarBib(attrvarBibSEXP);
    Rcpp::traits::input_parameter< std::string >::type attrBib(attrBibSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type attrvarCij(attrvarCijSEXP);
    Rcpp::traits::input_parameter< std::string >::type attrCij(attrCijSEXP);
    Rcpp::traits::input_parameter< std::string >::type fourCycleType(fourCycleTypeSEXP);
    __result = Rcpp::wrap(fourCycleCpp(sender, target, typevar, time, weightvar, xlog, attrvarNow, attrNow, attrvarAaj, attrAaj, attrvarBib, attrBib, attrvarCij, attrCij, fourCycleType));
    return __result;
END_RCPP
}
// similarityTotalAverageCpp
NumericVector similarityTotalAverageCpp(std::vector<std::string> sender, std::vector<std::string> target, NumericVector time, std::vector<std::string> eventAttributeVar, std::string eventAttribute, std::vector<std::string> eventTypeVar, std::string totalAverageSim, std::string matchNomatchSim, std::string senderTargetSim);
RcppExport SEXP rem_similarityTotalAverageCpp(SEXP senderSEXP, SEXP targetSEXP, SEXP timeSEXP, SEXP eventAttributeVarSEXP, SEXP eventAttributeSEXP, SEXP eventTypeVarSEXP, SEXP totalAverageSimSEXP, SEXP matchNomatchSimSEXP, SEXP senderTargetSimSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type sender(senderSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type time(timeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type eventAttributeVar(eventAttributeVarSEXP);
    Rcpp::traits::input_parameter< std::string >::type eventAttribute(eventAttributeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type eventTypeVar(eventTypeVarSEXP);
    Rcpp::traits::input_parameter< std::string >::type totalAverageSim(totalAverageSimSEXP);
    Rcpp::traits::input_parameter< std::string >::type matchNomatchSim(matchNomatchSimSEXP);
    Rcpp::traits::input_parameter< std::string >::type senderTargetSim(senderTargetSimSEXP);
    __result = Rcpp::wrap(similarityTotalAverageCpp(sender, target, time, eventAttributeVar, eventAttribute, eventTypeVar, totalAverageSim, matchNomatchSim, senderTargetSim));
    return __result;
END_RCPP
}
// similaritySimpleCpp
NumericVector similaritySimpleCpp(std::vector<std::string> sender, std::vector<std::string> target, NumericVector time, double xlog, std::vector<std::string> eventAttributeVar, std::string eventAttribute, std::vector<std::string> eventTypeVar, std::string matchNomatchSim, std::string senderTargetSim);
RcppExport SEXP rem_similaritySimpleCpp(SEXP senderSEXP, SEXP targetSEXP, SEXP timeSEXP, SEXP xlogSEXP, SEXP eventAttributeVarSEXP, SEXP eventAttributeSEXP, SEXP eventTypeVarSEXP, SEXP matchNomatchSimSEXP, SEXP senderTargetSimSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type sender(senderSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type xlog(xlogSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type eventAttributeVar(eventAttributeVarSEXP);
    Rcpp::traits::input_parameter< std::string >::type eventAttribute(eventAttributeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type eventTypeVar(eventTypeVarSEXP);
    Rcpp::traits::input_parameter< std::string >::type matchNomatchSim(matchNomatchSimSEXP);
    Rcpp::traits::input_parameter< std::string >::type senderTargetSim(senderTargetSimSEXP);
    __result = Rcpp::wrap(similaritySimpleCpp(sender, target, time, xlog, eventAttributeVar, eventAttribute, eventTypeVar, matchNomatchSim, senderTargetSim));
    return __result;
END_RCPP
}
// similarityComplexCpp
NumericVector similarityComplexCpp(std::vector<std::string> sender, std::vector<std::string> target, NumericVector time, double xlog, double halflifeTimeDifference, std::vector<std::string> eventAttributeVar, std::string eventAttribute, std::vector<std::string> eventTypeVar, std::string matchNomatchSim, std::string senderTargetSim);
RcppExport SEXP rem_similarityComplexCpp(SEXP senderSEXP, SEXP targetSEXP, SEXP timeSEXP, SEXP xlogSEXP, SEXP halflifeTimeDifferenceSEXP, SEXP eventAttributeVarSEXP, SEXP eventAttributeSEXP, SEXP eventTypeVarSEXP, SEXP matchNomatchSimSEXP, SEXP senderTargetSimSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type sender(senderSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type xlog(xlogSEXP);
    Rcpp::traits::input_parameter< double >::type halflifeTimeDifference(halflifeTimeDifferenceSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type eventAttributeVar(eventAttributeVarSEXP);
    Rcpp::traits::input_parameter< std::string >::type eventAttribute(eventAttributeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type eventTypeVar(eventTypeVarSEXP);
    Rcpp::traits::input_parameter< std::string >::type matchNomatchSim(matchNomatchSimSEXP);
    Rcpp::traits::input_parameter< std::string >::type senderTargetSim(senderTargetSimSEXP);
    __result = Rcpp::wrap(similarityComplexCpp(sender, target, time, xlog, halflifeTimeDifference, eventAttributeVar, eventAttribute, eventTypeVar, matchNomatchSim, senderTargetSim));
    return __result;
END_RCPP
}
